00002000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/2/2023 9:03:19 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Bitmap Subroutine
00000000                             3  * Written by : Ben Cohen    
00000000                             4  * Date       : 9/25/2023
00000000                             5  * Description: Bit mapping dawg
00000000                             6  *-----------------------------------------------------------
00000000                             7      
00000000                             8      
00000000                             9      
00000000                            10      
00000000                            11      
00000000                            12      ;USER!!!!! ARGUMENTS FOR SUBROUTINE DrawBMP
00000000                            13      ;a0 = Pointer to bmp file
00000000                            14      ;d2 = Left,Top Corner of bitmap chunk => High.w = Left, Low.W = Top
00000000                            15      ;d3 = Width/Height of bitmap chunk => High.w = Width, Low.W = Height
00000000                            16      ;d4 = Left,Top Corner of output display to display bitmap chunk => High.w = Left, Low.w = Top
00000000                            17      
00000000                            18      
00000000                            19      ;NOTE: If chunk offset is at a width/height that exceeds the BMP, offset will be set to 0, respectively
00000000                            20      ;NOTE: If Chunk Size is larger in width and/or height, chunk size will be set to the respective max value of the BMP minus the chunk offset
00000000                            21      ;NOTE: Having all inputs be 0, in accordance, will result in printing the entire BMP
00000000                            22      
00000000                            23      
00000000  =00000000                 24  Full_Image_Width    EQU     0
00000000  =00000002                 25  Full_Image_Height   EQU     2
00000000  =00000004                 26  Chunk_X_Offset      EQU     4
00000000  =00000006                 27  Chunk_Y_Offset      EQU     6
00000000  =00000008                 28  Chunk_Width         EQU     8
00000000  =0000000A                 29  Chunk_Height        EQU     10
00000000  =0000000C                 30  Output_X_Pos        EQU     12
00000000  =0000000E                 31  Output_Y_Pos        EQU     14
00000000                            32  
00000000  =0000000A                 33  BITMAP_IMAGE_DATA_OFFSET    EQU     10
00000000  =00000012                 34  BITMAP_WIDTH_OFFSET         EQU     18
00000000  =00000016                 35  BITMAP_HEIGHT_OFFSET        EQU     22
00000000  =0000001C                 36  BITMAP_BPP_OFFSET           EQU     28
00000000                            37  
00000000                            38  
00000000                            39  DrawBMP:
00000000                            40  
00000000  2448                      41      move.l  a0,a2                      ;For getting width and height
00000002  2004                      42      move.l  d4,d0                       ;Save user input here for now
00000004                            43      
00000004  0C50 424D                 44      cmp.w   #$424D,(a0)                   ;Check to see if file is BMP
00000008  6600 0150                 45      BNE     EndNotBMP
0000000C                            46      
0000000C  0C28 0020 001C            47      cmp.b   #32,BITMAP_BPP_OFFSET(a0)     ;Check to see if BMP is 32-bit
00000012  6600 0152                 48      BNE     EndNot32Bit
00000016                            49      
00000016  2828 0012                 50      move.l  BITMAP_WIDTH_OFFSET(a0),d4                  ;width   
0000001A  4EB9 00000192             51      jsr     ConvertToBigEndian
00000020  2C04                      52      move.l  d4,d6
00000022  BCBC 00000000             53      cmp.l   #0,d6
00000028  6700 012A                 54      BEQ     End                         ;MAke sure image width isnt zero
0000002C                            55      
0000002C  2828 0016                 56      move.l  BITMAP_HEIGHT_OFFSET(a0),d4                   ;Height
00000030  4EB9 00000192             57      jsr     ConvertToBigEndian
00000036  2E04                      58      move.l  d4,d7  
00000038  BEBC 00000000             59      cmp.l   #0,d7
0000003E  6700 0114                 60      BEQ     End                         ;Make sure image height isnt zero
00000042                            61      
00000042  2800                      62      move.l  d0,d4                       ;Move user input back into d4 UNCOMMENT IF NEEDED
00000044                            63      
00000044                            64      
00000044                            65      ;Get d1 to store max image size
00000044  4281                      66      clr.l   d1
00000046  3206                      67      move.w  d6,d1
00000048  4841                      68      swap    d1
0000004A  3207                      69      move.w  d7,d1
0000004C                            70      
0000004C  48E7 7800                 71      movem.l D1-D4,-(sp)                 ;Move vals to stack then 
00000050                            72      
00000050                            73      ;Check that offset does not extend past max image size (does it? Set to 0)
00000050  4281                      74      clr.l   d1
00000052  4284                      75      clr.l   d4
00000054                            76  
00000054                            77  CheckForZeroChunkX:
00000054                            78  
00000054  0C6F 0000 0008            79      cmp.w   #0,Chunk_Width(sp)
0000005A  6600 0008                 80      BNE     CheckForZeroChunkY
0000005E  3F6F 0000 0008            81      move.w  Full_Image_Width(sp),Chunk_Width(sp)
00000064                            82      
00000064                            83  CheckForZeroChunkY:
00000064  0C6F 0000 000A            84      cmp.w   #0,Chunk_Height(sp)
0000006A  6600 0008                 85      BNE     CheckChunkXOffset
0000006E  3F6F 0002 000A            86      move.w  Full_Image_Height(sp),Chunk_Height(sp)
00000074                            87  
00000074                            88  
00000074                            89  CheckChunkXOffset:
00000074                            90      
00000074  322F 0000                 91      move.w  Full_Image_Width(sp),d1
00000078  382F 0004                 92      move.w  Chunk_X_Offset(sp),d4
0000007C  B284                      93      cmp.l   d4,d1
0000007E  6E00 0008                 94      BGT     CheckChunkYOffset
00000082                            95  
00000082  3F7C 0000 0004            96      move.w  #0,Chunk_X_Offset(sp)
00000088                            97  
00000088                            98  CheckChunkYOffset:
00000088                            99  
00000088  322F 0002                100      move.w  Full_Image_Height(sp),d1
0000008C  382F 0006                101      move.w  Chunk_Y_Offset(sp),d4
00000090  B284                     102      cmp.l   d4,d1
00000092  6E00 0008                103      BGT     CheckWidth
00000096                           104  
00000096  3F7C 0000 0006           105      move.w  #0,Chunk_Y_Offset(sp)
0000009C                           106      
0000009C                           107  CheckWidth:    
0000009C                           108      ;Check that chunk size is not larger than picture    
0000009C  322F 0000                109      move.w  Full_Image_Width(sp),d1
000000A0  926F 0004                110      sub.w   Chunk_X_Offset(sp),d1    
000000A4  382F 0008                111      move.w  Chunk_Width(sp),d4
000000A8  B284                     112      cmp.l   d4,d1
000000AA                           113      
000000AA  6C00 0006                114      BGE     CheckHeight
000000AE                           115      
000000AE  3F41 0008                116      move.w  d1,Chunk_Width(sp)  ;Set max size minus offset as chunk size
000000B2                           117          
000000B2                           118  CheckHeight:
000000B2                           119  
000000B2  322F 0002                120      move.w  Full_Image_Height(sp),d1
000000B6  926F 0006                121      sub.w   Chunk_Y_Offset(sp),d1
000000BA  382F 000A                122      move.w  Chunk_Height(sp),d4
000000BE  B284                     123      cmp.l   d4,d1
000000C0  6C00 0006                124      BGE     SetOutputScreen
000000C4                           125      
000000C4  3F41 000A                126      move.w  d1,Chunk_Height(sp)  ;Set max size minus offset as chunk size
000000C8                           127  
000000C8                           128  
000000C8                           129  SetOutputScreen:
000000C8                           130      
000000C8                           131      ;SETTING OUTPUT SCREEN SIZE TO DISPLAY JUST ENOUGH   
000000C8  4281                     132      clr.l   d1
000000CA  322F 000C                133      move.w  Output_X_Pos(sp),d1
000000CE  D26F 0008                134      add.w   Chunk_Width(sp),d1
000000D2  4841                     135      swap    d1
000000D4  322F 000E                136      move.w  Output_Y_Pos(sp),d1
000000D8  D26F 000A                137      add.w   Chunk_Height(sp),d1
000000DC                           138      
000000DC  7021                     139      move.l  #33,d0
000000DE                           140      ;TRAP    #15
000000DE                           141      
000000DE                           142     
000000DE                           143      
000000DE                           144  
000000DE  2248                     145      move.l  a0,a1
000000E0  1028 000A                146      move.b  BITMAP_IMAGE_DATA_OFFSET(a0),d0
000000E4  D3C0                     147      add.l   d0,a1                               ;Move image data start to a1 address
000000E6                           148      
000000E6                           149      
000000E6                           150      ;clear iterator registers
000000E6  4286                     151      clr.l   d6
000000E8  4287                     152      clr.l   d7
000000EA                           153      
000000EA  3E2F 000A                154      move.w  Chunk_Height(sp),d7         ;Set max height of chunk
000000EE                           155      
000000EE                           156      
000000EE                           157      ;d0 store x and d1 store y of chunk start
000000EE  4280                     158      clr.l   d0
000000F0  4281                     159      clr.l   d1
000000F2  4283                     160      clr.l   d3
000000F4                           161      
000000F4                           162      ;To Find the actual height for d7
000000F4                           163      
000000F4  322F 0002                164      move.w  Full_Image_Height(sp),d1    ;Move max image height to d1
000000F8  926F 0006                165      sub.w   Chunk_Y_Offset(sp),d1       ;remove chunk offset from d1
000000FC  926F 000A                166      sub.w   Chunk_Height(sp),d1         ;remove chunk height size from d1
00000100                           167  
00000100                           168      
00000100  C2EF 0000                169      mulu.w  Full_Image_Width(sp),d1     ;multiply max width by true height and assign to d1
00000104  E589                     170      lsl.l   #02,d1                      ;Multiple by 4 to get from long to bytes (shift left 2 bits is the same)   
00000106  D3C1                     171      add.l   d1,a1                       ;add height(y) offset to a1
00000108  2649                     172      move.l  a1,a3                       ;store start of data to a3 and a3 will increment by width + offset when called
0000010A                           173      
0000010A  4281                     174      clr.l   d1
0000010C  322F 0004                175      move.w  Chunk_X_Offset(sp),d1       ;get x offset
00000110  C2FC 0004                176      mulu.w  #04,d1                      ;get x offset bytes
00000114  D3C1                     177      add.l   d1,a1                       ;added the offset to a1
00000116  244F                     178      move.l  sp,a2                       ;save current stack pointer to a2
00000118                           179      
00000118                           180  
00000118                           181  BasicDraw:
00000118                           182      
00000118                           183      
00000118  2819                     184      move.l  (a1)+,d4                    ;Get pixel data at a1 then increment
0000011A                           185      
0000011A  4EB9 000001AA            186      jsr     ConvertToBGR
00000120                           187    
00000120  2204                     188      move.l  d4,d1                       ;Set Pen Color
00000122  7050                     189      move.l  #80,d0
00000124  4E4F                     190      TRAP #15
00000126                           191      
00000126                           192      ;color pixel (requires output coordinate mapping)
00000126  2206                     193      move.l  d6,d1                       ;move current x val to output x
00000128  D26F 000C                194      add.w   Output_X_Pos(sp),d1             ;add in the user define output offset for X
0000012C  2407                     195      move.l  d7,d2                       ;move current y val to output y
0000012E  D46F 000E                196      add.w   Output_Y_Pos(sp),d2             ;add the user defined output offset for Y
00000132  5342                     197      sub.w   #01,d2                      ;Minus 1 to output to account for max size
00000134  7052                     198      move.l  #82,d0
00000136  4E4F                     199      TRAP #15
00000138                           200      
00000138                           201      ;increment width iterator value
00000138  5286                     202      add.l   #01,d6
0000013A                           203      
0000013A  4281                     204      clr.l   d1
0000013C  322F 0008                205      move.w  Chunk_Width(sp),d1      ;Move chunk width to d1
00000140  BC81                     206      cmp.l   d1,d6                   ;We at width of chunk?
00000142  66D4                     207      BNE     BasicDraw
00000144                           208      
00000144                           209      
00000144                           210  CheckIfEnd:
00000144  4281                     211      clr.l   d1
00000146  BE81                     212      cmp.l   d1,d7       ;If the height = 0, we are done since current height = final height of chunk
00000148  6700 000A                213      BEQ     End
0000014C  4EB9 00000172            214      jsr     NextRow
00000152  66C4                     215      BNE     BasicDraw   ;Branch to draw again
00000154                           216      
00000154                           217  End:  
00000154  4CDF 001E                218      movem.l (sp)+,D1-D4
00000158  4E75                     219      rts
0000015A                           220      
0000015A                           221  EndNotBMP:
0000015A                           222      ;Print not a bmp to screen
0000015A  700D                     223      move.l  #13,d0
0000015C  43F9 000001B6            224      lea     NotBMP,a1
00000162  4E4F                     225      TRAP #15
00000164  4E75                     226      rts
00000166                           227      
00000166                           228  EndNot32Bit:
00000166                           229      ;Print not 32 bit to screen
00000166  700D                     230      move.l  #13,d0
00000168  43F9 000001C8            231      lea     Not32Bit,a1
0000016E  4E4F                     232      TRAP #15
00000170  4E75                     233      rts
00000172                           234  
00000172                           235  
00000172                           236  NextRow:
00000172  4286                     237      clr.l   d6
00000174  4281                     238      clr.l   d1
00000176  4282                     239      clr.l   d2
00000178                           240      
00000178  5283                     241      add.l   #01,d3                      ;REMOVE LATER IF NOT USED
0000017A                           242      
0000017A                           243      ;go to next row offset
0000017A  322A 0000                244      move.w  Full_Image_Width(a2),d1     ;Move full image width to d1
0000017E  E589                     245      lsl.l   #02,d1                      ;Multiple by 4 to get from long to bytes  
00000180  D7C1                     246      add.l   d1,a3                       ;add this increment to a3 (the row holder)   
00000182  224B                     247      move.l  a3,a1                       ;give increment to a1
00000184                           248      
00000184  342A 0004                249      move.w  Chunk_X_Offset(a2),d2       ;add width offset (long) to d2
00000188  C4FC 0004                250      mulu.w   #04,d2                     ;get width offset in bytes
0000018C  D3C2                     251      add.l   d2,a1                       ;add to a1    
0000018E  5387                     252      sub.l   #01,d7                      ;decrease current height count
00000190  4E75                     253      rts
00000192                           254      
00000192                           255  ConvertToBigEndian:
00000192                           256  
00000192                           257      
00000192  1A04                     258      move.b  d4,d5
00000194  E08C                     259      lsr.l   #$08,d4
00000196  E18D                     260      lsl.l   #$08,d5
00000198  1A04                     261      move.b  d4,d5
0000019A  E08C                     262      lsr.l   #$08,d4
0000019C  E18D                     263      lsl.l   #$08,d5
0000019E  1A04                     264      move.b  d4,d5
000001A0  E08C                     265      lsr.l   #$08,d4
000001A2  E18D                     266      lsl.l   #$08,d5
000001A4  1A04                     267      move.b  d4,d5
000001A6  2805                     268      move.l  d5,d4
000001A8  4E75                     269      rts
000001AA                           270      
000001AA                           271  ConvertToBGR:   
000001AA                           272  
000001AA  1A04                     273      move.b  d4,d5
000001AC  E08C                     274      lsr.l   #$08,d4
000001AE  4845                     275      swap    d5
000001B0  E18D                     276      lsl.l   #$08,d5
000001B2  D885                     277      add.l  d5,d4
000001B4                           278      
000001B4  4E75                     279      rts
000001B6                           280      
000001B6                           281          
000001B6                           282     
000001B6= 46 69 6C 65 20 6E ...    283  NotBMP  dc.b    'File not a Bitmap',0
000001C8= 42 4D 50 20 69 73 ...    284  Not32Bit    dc.b    'BMP is not in 32-bit format',0
000001E4                           285  
000001E4                           286  
000001E4                           287  ;END OF DrawBMP Subroutine
000001E4                           288  
000001E4                           289  
000001E4  4E72 1000                290          STOP    #$1000
000001E8                           291     
00002000                           292  START   ORG    $2000                  ; first instruction of program
00002000                           293  
00002000                           294  * Put program code here
00002000                           295      
00002000                           296      
00002000                           297      ;TESTING CASES
00002000                           298      
00002000                           299      ;Chunk Offset
00002000                           300      ;move.l  #$00FA01C2,d2   ;Bitmap chunk start at 250,450
00002000                           301      ;move.l  #$00000000,d2   ;Bitmap chunk start at 0,0
00002000                           302      ;move.l  #$006400C8,d2   ;Bitmap chunk start at 100,200
00002000                           303      ;move.l  #$00320048,d2   ;Bitmap chunk start at 50,75
00002000                           304      ;move.l  #$FFFFFFFF,d2    ;Bitmap chunk start at Max,Max
00002000                           305      
00002000  41F9 00002042            306      lea     Bitmap, a0
00002006                           307      
00002006  4EB8 0000                308      jsr DrawBMP
0000200A                           309      
0000200A  41F9 00002042            310      lea     Bitmap, a0
00002010  243C 00FA01C2            311      move.l  #$00FA01C2,d2   ;Bitmap chunk start at 250,450
00002016  263C 00C8012C            312      move.l  #$00C8012C,d3   ;Chunk 200x300
0000201C                           313      
0000201C  4EB8 0000                314      jsr DrawBMP
00002020                           315      
00002020                           316      
00002020  41F9 00002042            317      lea     Bitmap, a0
00002026  243C 006400C8            318      move.l  #$006400C8,d2   ;Bitmap chunk start at 100,200
0000202C  263C 00640064            319      move.l  #$00640064,d3   ;Chunk 100x100
00002032  283C 006400FA            320      move.l  #$006400FA,d4   ;Output at 100,250
00002038                           321  
00002038  4EB8 0000                322      jsr DrawBMP
0000203C                           323      
0000203C                           324      
0000203C                           325      
0000203C                           326      ;Chunk Size
0000203C                           327      ;move.l  #$00C8012C,d3   ;Chunk 200x300
0000203C                           328      ;move.l  #$00640064,d3   ;Chunk 100x100
0000203C                           329      ;move.l #$023A038F,d3    ;Chunk 570x911 W bmp size
0000203C                           330      ;move.l  #$00D800F8,d3   ;Chunk 216x248 chen transparent size
0000203C                           331      ;move.l  #$015E0190,d3   ;Chunk 350x400
0000203C                           332      ;move.l  #$FFFFFFFF,d3   ;Max chunk possible
0000203C                           333      
0000203C                           334      ;Height chunk test
0000203C                           335      ;move.l  #$000001c2,d2      ;Chunk bitmap chunk start at 0,450
0000203C                           336      ;move.l  d1,d3
0000203C                           337      ;move.w  #$012C,d3      ;Chunk height = 300
0000203C                           338      
0000203C                           339      ;side chunk test
0000203C                           340      ;move.l  d1,d3
0000203C                           341      ;swap    d3
0000203C                           342      ;move.w  #$00C8, d3      ;Chunk is max height, but certain width
0000203C                           343      ;swap    d3
0000203C                           344      
0000203C                           345      ;Output Offset Test
0000203C                           346      ;move.l  #$006400FA,d4   ;Output at 100,250
0000203C                           347      ;move.l  #$019601AF,d4   ;Output at 406,431
0000203C                           348      ;clr.l   d4              ;Output at 0,0
0000203C                           349      
0000203C                           350      
0000203C                           351      ;lea     Bitmap, a0
0000203C                           352      
0000203C                           353      ;jsr DrawBMP
0000203C                           354  
0000203C  7000                     355      move.l  #$0,d0
0000203E                           356      
0000203E                           357    
0000203E                           358      
0000203E                           359      
0000203E                           360      
0000203E                           361      
0000203E                           362  
0000203E                           363      
0000203E                           364  
0000203E                           365  
0000203E                           366  
0000203E                           367  
0000203E  4E72 2000                368          STOP #$2000
00002042                           369  * Put variables and constants here
00002042                           370  
00002042                           371  
00002042                           372  Bitmap:  
00002042                           373      INCBIN  "w copy.bmp"    
001FD212                           374      ;INCBIN  "chen_transparent.bmp"
001FD212                           375      ;INCBIN  "asmdata.bin"
001FD212                           376      ;INCBIN  "mario_face.bmp"
001FD212                           377   
001FD212                           378  
001FD212                           379      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BASICDRAW           118
BITMAP              2042
BITMAP_BPP_OFFSET   1C
BITMAP_HEIGHT_OFFSET  16
BITMAP_IMAGE_DATA_OFFSET  A
BITMAP_WIDTH_OFFSET  12
CHECKCHUNKXOFFSET   74
CHECKCHUNKYOFFSET   88
CHECKFORZEROCHUNKX  54
CHECKFORZEROCHUNKY  64
CHECKHEIGHT         B2
CHECKIFEND          144
CHECKWIDTH          9C
CHUNK_HEIGHT        A
CHUNK_WIDTH         8
CHUNK_X_OFFSET      4
CHUNK_Y_OFFSET      6
CONVERTTOBGR        1AA
CONVERTTOBIGENDIAN  192
DRAWBMP             0
END                 154
ENDNOT32BIT         166
ENDNOTBMP           15A
FULL_IMAGE_HEIGHT   2
FULL_IMAGE_WIDTH    0
NEXTROW             172
NOT32BIT            1C8
NOTBMP              1B6
OUTPUT_X_POS        C
OUTPUT_Y_POS        E
SETOUTPUTSCREEN     C8
START               2000
